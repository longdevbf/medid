import React, { useState } from "react";
import { useWallet } from '@meshsdk/react';
import styles from './Update.module.css';
import updatePortfolio from "../../../utils/PatientAction/utils/update";

interface ActionResult {
  message: string;
  type: "success" | "error" | "loading" | "";
  txHash?: string;
}

// ƒê·ªãnh nghƒ©a c√°c l√Ω do c·∫≠p nh·∫≠t
type UpdateReason = {
  id: string;
  title: string;
  description: string;
  icon: string;
}

const Update: React.FC = () => {
  const { wallet, connected } = useWallet();
  const [txHash, setTxHash] = useState<string>("");
  const [doctorAddresses, setDoctorAddresses] = useState<string[]>([""]);
  const [confirmed, setConfirmed] = useState<boolean>(false);
  const [selectedReason, setSelectedReason] = useState<string>("");
  const [actionResult, setActionResult] = useState<ActionResult>({
    message: "",
    type: "",
  });
  const [isLoading, setIsLoading] = useState<boolean>(false);

  // Danh s√°ch c√°c l√Ω do c·∫≠p nh·∫≠t
  const updateReasons: UpdateReason[] = [
    {
      id: "change-doctor",
      title: "Thay ƒê·ªïi B√°c Sƒ© ƒêi·ªÅu Tr·ªã",
      description: "B·∫°n mu·ªën thay ƒë·ªïi b√°c sƒ© ƒëi·ªÅu tr·ªã ch√≠nh ho·∫∑c b·ªï sung b√°c sƒ© chuy√™n khoa m·ªõi",
      icon: "üë®‚Äç‚öïÔ∏è"
    },
    {
      id: "revoke-access",
      title: "Thu H·ªìi Quy·ªÅn Truy C·∫≠p",
      description: "B·∫°n mu·ªën h·ªßy quy·ªÅn truy c·∫≠p c·ªßa nh·ªØng b√°c sƒ© kh√¥ng c√≤n ƒëi·ªÅu tr·ªã cho b·∫°n",
      icon: "üîí"
    },
    {
      id: "second-opinion",
      title: "Tham Kh·∫£o √ù Ki·∫øn Kh√°c",
      description: "B·∫°n mu·ªën l·∫•y √Ω ki·∫øn t·ª´ b√°c sƒ© kh√°c v·ªÅ t√¨nh tr·∫°ng s·ª©c kh·ªèe c·ªßa m√¨nh",
      icon: "üîç"
    },
    {
      id: "moving-facility",
      title: "Chuy·ªÉn C∆° S·ªü Y T·∫ø",
      description: "B·∫°n ƒëang chuy·ªÉn ƒë·∫øn c∆° s·ªü y t·∫ø m·ªõi v√† c·∫ßn c·∫≠p nh·∫≠t quy·ªÅn truy c·∫≠p",
      icon: "üè•"
    },
    {
      id: "other",
      title: "L√Ω Do Kh√°c",
      description: "L√Ω do kh√°c kh√¥ng c√≥ trong danh s√°ch",
      icon: "üìù"
    }
  ];

  const handleDoctorChange = (index: number, value: string) => {
    const updated = [...doctorAddresses];
    updated[index] = value;
    setDoctorAddresses(updated);
  };

  const addDoctor = () => {
    setDoctorAddresses([...doctorAddresses, ""]);
  };

  const removeDoctor = (index: number) => {
    if (doctorAddresses.length > 1) {
      const updated = [...doctorAddresses];
      updated.splice(index, 1);
      setDoctorAddresses(updated);
    }
  };

  const resetForm = () => {
    setTxHash("");
    setDoctorAddresses([""]);
    setConfirmed(false);
    setSelectedReason("");
    setActionResult({ message: "", type: "" });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    // Lo·∫°i b·ªè c√°c ƒë·ªãa ch·ªâ tr·ªëng
    const validDoctors = doctorAddresses.filter((addr) => addr.trim() !== "");

    if (!connected) {
      setActionResult({ 
        message: "Vui l√≤ng k·∫øt n·ªëi v√≠ Cardano tr∆∞·ªõc khi c·∫≠p nh·∫≠t quy·ªÅn truy c·∫≠p", 
        type: "error" 
      });
      return;
    }

    if (txHash.trim() === "" || txHash.length < 64) {
      setActionResult({ 
        message: "Vui l√≤ng nh·∫≠p m√£ giao d·ªãch (Transaction Hash) h·ª£p l·ªá", 
        type: "error" 
      });
      return;
    }

    if (validDoctors.length === 0) {
      setActionResult({ 
        message: "Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt ƒë·ªãa ch·ªâ v√≠ b√°c sƒ©", 
        type: "error" 
      });
      return;
    }

    const invalidAddresses = validDoctors.filter(addr => !addr.startsWith('addr'));
    if (invalidAddresses.length > 0) {
      setActionResult({ 
        message: "ƒê·ªãa ch·ªâ v√≠ b√°c sƒ© ph·∫£i l√† ƒë·ªãa ch·ªâ Cardano h·ª£p l·ªá (b·∫Øt ƒë·∫ßu b·∫±ng 'addr')", 
        type: "error" 
      });
      return;
    }

    if (!selectedReason) {
      setActionResult({ 
        message: "Vui l√≤ng ch·ªçn l√Ω do c·∫≠p nh·∫≠t quy·ªÅn truy c·∫≠p", 
        type: "error" 
      });
      return;
    }

    if (!confirmed) {
      setActionResult({ 
        message: "B·∫°n ph·∫£i x√°c nh·∫≠n ·ªßy quy·ªÅn tr∆∞·ªõc khi ti·∫øp t·ª•c", 
        type: "error" 
      });
      return;
    }

    try {
      setIsLoading(true);
      setActionResult({
        message: "ƒêang x·ª≠ l√Ω giao d·ªãch tr√™n blockchain...",
        type: "loading",
      });

      // G·ªçi h√†m updatePortfolio t·ª´ smart contract
      const result = await updatePortfolio(wallet, validDoctors, txHash);

      // Hi·ªÉn th·ªã k·∫øt qu·∫£ th√†nh c√¥ng
      setActionResult({
        message: "C·∫≠p nh·∫≠t quy·ªÅn truy c·∫≠p th√†nh c√¥ng! Giao d·ªãch ƒë√£ ƒë∆∞·ª£c ghi l√™n blockchain.",
        type: "success",
        txHash: result
      });

      // Log k·∫øt qu·∫£
      console.log({
        txHash,
        doctorAddresses: validDoctors,
        updateReason: selectedReason,
        resultTxHash: result
      });

    } catch (error) {
      console.error("Error updating access permissions:", error);
      
      setActionResult({
        message: `L·ªói khi c·∫≠p nh·∫≠t quy·ªÅn truy c·∫≠p: ${error instanceof Error ? error.message : 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`,
        type: "error",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className={styles["main-content"]}>
      <div className={styles.container}>
        <div className={styles.card}>
          <h2 className={styles.title}>C·∫≠p Nh·∫≠t Quy·ªÅn Truy C·∫≠p H·ªì S∆° Y T·∫ø</h2>
          
          <div className={styles["info-text"]}>
            <div className={styles["info-icon"]}>‚ÑπÔ∏è</div>
            <div>
              Trang n√†y cho ph√©p b·∫°n c·∫≠p nh·∫≠t quy·ªÅn truy c·∫≠p cho h·ªì s∆° y t·∫ø ƒëi·ªán t·ª≠ c·ªßa b·∫°n ƒë∆∞·ª£c l∆∞u tr·ªØ tr√™n blockchain.
              Nh·∫≠p m√£ giao d·ªãch (txHash) v√† ƒë·ªãa ch·ªâ v√≠ c·ªßa c√°c b√°c sƒ© m√† b·∫°n mu·ªën c·∫•p quy·ªÅn truy c·∫≠p.
            </div>
          </div>

          {!connected && (
            <div className={styles["wallet-warning"]}>
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <circle cx="12" cy="12" r="10"></circle>
                <line x1="12" y1="8" x2="12" y2="12"></line>
                <line x1="12" y1="16" x2="12.01" y2="16"></line>
              </svg>
              <p>Vui l√≤ng k·∫øt n·ªëi v√≠ Cardano ƒë·ªÉ c·∫≠p nh·∫≠t quy·ªÅn truy c·∫≠p h·ªì s∆° y t·∫ø</p>
            </div>
          )}

          <form onSubmit={handleSubmit}>
            <div className={styles["form-group"]}>
              <label className={styles.label} htmlFor="txHash">M√£ Giao D·ªãch (Transaction Hash):</label>
              <input className={styles.input}
                type="text"
                id="txHash"
                name="txHash"
                placeholder="Nh·∫≠p m√£ giao d·ªãch kh√≥a h·ªì s∆°"
                required
                value={txHash}
                onChange={(e) => setTxHash(e.target.value)}
                disabled={isLoading}
              />
              <small className={styles.helpText}>
                Nh·∫≠p m√£ giao d·ªãch ban ƒë·∫ßu khi b·∫°n ƒë√£ kh√≥a h·ªì s∆° y t·∫ø tr√™n blockchain
              </small>
            </div>

            <div className={styles["form-group"]}>
              <label className={styles.label}>ƒê·ªãa Ch·ªâ V√≠ B√°c Sƒ©:</label>
              <div id="doctorAddresses">
                {doctorAddresses.map((addr, index) => (
                  <div className={styles["doctor-entry"]} key={index}>
                    <input
                      className={styles.input}
                      type="text"
                      name="doctorAddress"
                      placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ v√≠ Cardano c·ªßa b√°c sƒ© (b·∫Øt ƒë·∫ßu b·∫±ng addr...)"
                      required
                      value={addr}
                      onChange={(e) => handleDoctorChange(index, e.target.value)}
                      disabled={isLoading}
                    />
                    <button 
                      type="button" 
                      className={styles.removeBtn} 
                      onClick={() => removeDoctor(index)}
                      disabled={doctorAddresses.length <= 1 || isLoading}
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                        <line x1="18" y1="6" x2="6" y2="18"></line>
                        <line x1="6" y1="6" x2="18" y2="18"></line>
                      </svg>
                    </button>
                  </div>
                ))}
              </div>
              <button 
                type="button" 
                className={styles["add-doctor-btn"]} 
                onClick={addDoctor}
                disabled={isLoading}
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <line x1="12" y1="5" x2="12" y2="19"></line>
                  <line x1="5" y1="12" x2="19" y2="12"></line>
                </svg> 
                Th√™m B√°c Sƒ©
              </button>
            </div>

            {/* Ph·∫ßn ch·ªçn l√Ω do c·∫≠p nh·∫≠t */}
            <div className={styles["form-group"]}>
              <label className={styles.label}>L√Ω Do C·∫≠p Nh·∫≠t:</label>
              <div className={styles["reason-cards"]}>
                {updateReasons.map((reason) => (
                  <div 
                    key={reason.id} 
                    className={`${styles["reason-card"]} ${selectedReason === reason.id ? styles["reason-selected"] : ""}`}
                    onClick={() => !isLoading && setSelectedReason(reason.id)}
                  >
                    <div className={styles["reason-icon"]}>{reason.icon}</div>
                    <h4>{reason.title}</h4>
                    <p>{reason.description}</p>
                    {selectedReason === reason.id && (
                      <div className={styles["selected-indicator"]}>
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                          <polyline points="20 6 9 17 4 12"></polyline>
                        </svg>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>

            <div className={styles["form-group"] + " " + styles["checkbox-group"]}>
              <input className={styles.checkbox}
                type="checkbox"
                id="confirmCheck"
                checked={confirmed}
                onChange={(e) => setConfirmed(e.target.checked)}
                required
                disabled={isLoading}
              />
              <label htmlFor="confirmCheck" className={styles.checkboxLabel}>
                T√¥i x√°c nh·∫≠n r·∫±ng t√¥i ƒëang ·ªßy quy·ªÅn cho c√°c b√°c sƒ© n√†y truy c·∫≠p h·ªì s∆° y t·∫ø c·ªßa t√¥i
              </label>
            </div>

            <div className={styles["btn-group"]}>
              <button 
                type="button" 
                className={styles["btn"] + " " + styles["btn-secondary"]} 
                onClick={resetForm}
                disabled={isLoading}
              >
                L√†m M·ªõi
              </button>
              <button 
                type="submit" 
                className={styles.btn + " " + styles["btn-primary"]}
                disabled={isLoading || !connected}
              >
                {isLoading ? (
                  <>
                    <span className={styles.spinner}></span>
                    ƒêang X·ª≠ L√Ω...
                  </>
                ) : "C·∫≠p Nh·∫≠t Quy·ªÅn Truy C·∫≠p"}
              </button>
            </div>
          </form>

          {actionResult.message && (
            <div
              className={`${styles["action-result"]} ${styles[actionResult.type]}`}
              id="actionResult"
            >
              <div className={styles["result-content"]}>
                {actionResult.type === "loading" && <div className={styles.spinnerLarge}></div>}
                {actionResult.type === "success" && (
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                    <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                    <polyline points="22 4 12 14.01 9 11.01"></polyline>
                  </svg>
                )}
                {actionResult.type === "error" && (
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                    <circle cx="12" cy="12" r="10"></circle>
                    <line x1="12" y1="8" x2="12" y2="12"></line>
                    <line x1="12" y1="16" x2="12.01" y2="16"></line>
                  </svg>
                )}
                
                <div className={styles["result-message"]}>
                  {actionResult.message}
                  
                  {actionResult.txHash && (
                    <div className={styles["tx-details"]}>
                      <p><strong>M√£ Giao D·ªãch:</strong></p>
                      <a 
                        href={`https://preprod.cardanoscan.io/transaction/${actionResult.txHash}`}
                        target="_blank"
                        rel="noopener noreferrer"
                        className={styles["tx-link"]}
                      >
                        {actionResult.txHash}
                        <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                          <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path>
                          <polyline points="15 3 21 3 21 9"></polyline>
                          <line x1="10" y1="14" x2="21" y2="3"></line>
                        </svg>
                      </a>
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Update;